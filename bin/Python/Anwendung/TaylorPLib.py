# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.9
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TaylorPLib', [dirname(__file__)])
        except ImportError:
            import _TaylorPLib
            return _TaylorPLib
        if fp is not None:
            try:
                _mod = imp.load_module('_TaylorPLib', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _TaylorPLib = swig_import_helper()
    del swig_import_helper
else:
    import _TaylorPLib
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TaylorPLib.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _TaylorPLib.SwigPyIterator_value(self)
    def incr(self, n=1): return _TaylorPLib.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _TaylorPLib.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _TaylorPLib.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _TaylorPLib.SwigPyIterator_equal(self, *args)
    def copy(self): return _TaylorPLib.SwigPyIterator_copy(self)
    def next(self): return _TaylorPLib.SwigPyIterator_next(self)
    def __next__(self): return _TaylorPLib.SwigPyIterator___next__(self)
    def previous(self): return _TaylorPLib.SwigPyIterator_previous(self)
    def advance(self, *args): return _TaylorPLib.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _TaylorPLib.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _TaylorPLib.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _TaylorPLib.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _TaylorPLib.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _TaylorPLib.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _TaylorPLib.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _TaylorPLib.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class DoubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleArray, name)
    __repr__ = _swig_repr
    def iterator(self): return _TaylorPLib.DoubleArray_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _TaylorPLib.DoubleArray___nonzero__(self)
    def __bool__(self): return _TaylorPLib.DoubleArray___bool__(self)
    def __len__(self): return _TaylorPLib.DoubleArray___len__(self)
    def pop(self): return _TaylorPLib.DoubleArray_pop(self)
    def __getslice__(self, *args): return _TaylorPLib.DoubleArray___getslice__(self, *args)
    def __setslice__(self, *args): return _TaylorPLib.DoubleArray___setslice__(self, *args)
    def __delslice__(self, *args): return _TaylorPLib.DoubleArray___delslice__(self, *args)
    def __delitem__(self, *args): return _TaylorPLib.DoubleArray___delitem__(self, *args)
    def __getitem__(self, *args): return _TaylorPLib.DoubleArray___getitem__(self, *args)
    def __setitem__(self, *args): return _TaylorPLib.DoubleArray___setitem__(self, *args)
    def append(self, *args): return _TaylorPLib.DoubleArray_append(self, *args)
    def empty(self): return _TaylorPLib.DoubleArray_empty(self)
    def size(self): return _TaylorPLib.DoubleArray_size(self)
    def clear(self): return _TaylorPLib.DoubleArray_clear(self)
    def swap(self, *args): return _TaylorPLib.DoubleArray_swap(self, *args)
    def get_allocator(self): return _TaylorPLib.DoubleArray_get_allocator(self)
    def begin(self): return _TaylorPLib.DoubleArray_begin(self)
    def end(self): return _TaylorPLib.DoubleArray_end(self)
    def rbegin(self): return _TaylorPLib.DoubleArray_rbegin(self)
    def rend(self): return _TaylorPLib.DoubleArray_rend(self)
    def pop_back(self): return _TaylorPLib.DoubleArray_pop_back(self)
    def erase(self, *args): return _TaylorPLib.DoubleArray_erase(self, *args)
    def __init__(self, *args): 
        this = _TaylorPLib.new_DoubleArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _TaylorPLib.DoubleArray_push_back(self, *args)
    def front(self): return _TaylorPLib.DoubleArray_front(self)
    def back(self): return _TaylorPLib.DoubleArray_back(self)
    def assign(self, *args): return _TaylorPLib.DoubleArray_assign(self, *args)
    def resize(self, *args): return _TaylorPLib.DoubleArray_resize(self, *args)
    def insert(self, *args): return _TaylorPLib.DoubleArray_insert(self, *args)
    def reserve(self, *args): return _TaylorPLib.DoubleArray_reserve(self, *args)
    def capacity(self): return _TaylorPLib.DoubleArray_capacity(self)
    __swig_destroy__ = _TaylorPLib.delete_DoubleArray
    __del__ = lambda self : None;
DoubleArray_swigregister = _TaylorPLib.DoubleArray_swigregister
DoubleArray_swigregister(DoubleArray)

class IntArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntArray, name)
    __repr__ = _swig_repr
    def iterator(self): return _TaylorPLib.IntArray_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _TaylorPLib.IntArray___nonzero__(self)
    def __bool__(self): return _TaylorPLib.IntArray___bool__(self)
    def __len__(self): return _TaylorPLib.IntArray___len__(self)
    def pop(self): return _TaylorPLib.IntArray_pop(self)
    def __getslice__(self, *args): return _TaylorPLib.IntArray___getslice__(self, *args)
    def __setslice__(self, *args): return _TaylorPLib.IntArray___setslice__(self, *args)
    def __delslice__(self, *args): return _TaylorPLib.IntArray___delslice__(self, *args)
    def __delitem__(self, *args): return _TaylorPLib.IntArray___delitem__(self, *args)
    def __getitem__(self, *args): return _TaylorPLib.IntArray___getitem__(self, *args)
    def __setitem__(self, *args): return _TaylorPLib.IntArray___setitem__(self, *args)
    def append(self, *args): return _TaylorPLib.IntArray_append(self, *args)
    def empty(self): return _TaylorPLib.IntArray_empty(self)
    def size(self): return _TaylorPLib.IntArray_size(self)
    def clear(self): return _TaylorPLib.IntArray_clear(self)
    def swap(self, *args): return _TaylorPLib.IntArray_swap(self, *args)
    def get_allocator(self): return _TaylorPLib.IntArray_get_allocator(self)
    def begin(self): return _TaylorPLib.IntArray_begin(self)
    def end(self): return _TaylorPLib.IntArray_end(self)
    def rbegin(self): return _TaylorPLib.IntArray_rbegin(self)
    def rend(self): return _TaylorPLib.IntArray_rend(self)
    def pop_back(self): return _TaylorPLib.IntArray_pop_back(self)
    def erase(self, *args): return _TaylorPLib.IntArray_erase(self, *args)
    def __init__(self, *args): 
        this = _TaylorPLib.new_IntArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _TaylorPLib.IntArray_push_back(self, *args)
    def front(self): return _TaylorPLib.IntArray_front(self)
    def back(self): return _TaylorPLib.IntArray_back(self)
    def assign(self, *args): return _TaylorPLib.IntArray_assign(self, *args)
    def resize(self, *args): return _TaylorPLib.IntArray_resize(self, *args)
    def insert(self, *args): return _TaylorPLib.IntArray_insert(self, *args)
    def reserve(self, *args): return _TaylorPLib.IntArray_reserve(self, *args)
    def capacity(self): return _TaylorPLib.IntArray_capacity(self)
    __swig_destroy__ = _TaylorPLib.delete_IntArray
    __del__ = lambda self : None;
IntArray_swigregister = _TaylorPLib.IntArray_swigregister
IntArray_swigregister(IntArray)

class PolynomialArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolynomialArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PolynomialArray, name)
    __repr__ = _swig_repr
    def iterator(self): return _TaylorPLib.PolynomialArray_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _TaylorPLib.PolynomialArray___nonzero__(self)
    def __bool__(self): return _TaylorPLib.PolynomialArray___bool__(self)
    def __len__(self): return _TaylorPLib.PolynomialArray___len__(self)
    def pop(self): return _TaylorPLib.PolynomialArray_pop(self)
    def __getslice__(self, *args): return _TaylorPLib.PolynomialArray___getslice__(self, *args)
    def __setslice__(self, *args): return _TaylorPLib.PolynomialArray___setslice__(self, *args)
    def __delslice__(self, *args): return _TaylorPLib.PolynomialArray___delslice__(self, *args)
    def __delitem__(self, *args): return _TaylorPLib.PolynomialArray___delitem__(self, *args)
    def __getitem__(self, *args): return _TaylorPLib.PolynomialArray___getitem__(self, *args)
    def __setitem__(self, *args): return _TaylorPLib.PolynomialArray___setitem__(self, *args)
    def append(self, *args): return _TaylorPLib.PolynomialArray_append(self, *args)
    def empty(self): return _TaylorPLib.PolynomialArray_empty(self)
    def size(self): return _TaylorPLib.PolynomialArray_size(self)
    def clear(self): return _TaylorPLib.PolynomialArray_clear(self)
    def swap(self, *args): return _TaylorPLib.PolynomialArray_swap(self, *args)
    def get_allocator(self): return _TaylorPLib.PolynomialArray_get_allocator(self)
    def begin(self): return _TaylorPLib.PolynomialArray_begin(self)
    def end(self): return _TaylorPLib.PolynomialArray_end(self)
    def rbegin(self): return _TaylorPLib.PolynomialArray_rbegin(self)
    def rend(self): return _TaylorPLib.PolynomialArray_rend(self)
    def pop_back(self): return _TaylorPLib.PolynomialArray_pop_back(self)
    def erase(self, *args): return _TaylorPLib.PolynomialArray_erase(self, *args)
    def __init__(self, *args): 
        this = _TaylorPLib.new_PolynomialArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _TaylorPLib.PolynomialArray_push_back(self, *args)
    def front(self): return _TaylorPLib.PolynomialArray_front(self)
    def back(self): return _TaylorPLib.PolynomialArray_back(self)
    def assign(self, *args): return _TaylorPLib.PolynomialArray_assign(self, *args)
    def resize(self, *args): return _TaylorPLib.PolynomialArray_resize(self, *args)
    def insert(self, *args): return _TaylorPLib.PolynomialArray_insert(self, *args)
    def reserve(self, *args): return _TaylorPLib.PolynomialArray_reserve(self, *args)
    def capacity(self): return _TaylorPLib.PolynomialArray_capacity(self)
    __swig_destroy__ = _TaylorPLib.delete_PolynomialArray
    __del__ = lambda self : None;
PolynomialArray_swigregister = _TaylorPLib.PolynomialArray_swigregister
PolynomialArray_swigregister(PolynomialArray)

MAX_MESSAGE_SIZE = _TaylorPLib.MAX_MESSAGE_SIZE
class Polynomial(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Polynomial, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Polynomial, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _TaylorPLib.new_Polynomial(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TaylorPLib.delete_Polynomial
    __del__ = lambda self : None;
    def order(self): return _TaylorPLib.Polynomial_order(self)
    def get(self, *args): return _TaylorPLib.Polynomial_get(self, *args)
    def set(self, *args): return _TaylorPLib.Polynomial_set(self, *args)
    def __eq__(self, *args): return _TaylorPLib.Polynomial___eq__(self, *args)
    def __ne__(self, *args): return _TaylorPLib.Polynomial___ne__(self, *args)
    def __lt__(self, *args): return _TaylorPLib.Polynomial___lt__(self, *args)
    def __le__(self, *args): return _TaylorPLib.Polynomial___le__(self, *args)
    def __gt__(self, *args): return _TaylorPLib.Polynomial___gt__(self, *args)
    def __ge__(self, *args): return _TaylorPLib.Polynomial___ge__(self, *args)
    def __add__(self, *args): return _TaylorPLib.Polynomial___add__(self, *args)
    def __iadd__(self, *args): return _TaylorPLib.Polynomial___iadd__(self, *args)
    def __neg__(self): return _TaylorPLib.Polynomial___neg__(self)
    def __sub__(self, *args): return _TaylorPLib.Polynomial___sub__(self, *args)
    def __isub__(self, *args): return _TaylorPLib.Polynomial___isub__(self, *args)
    def __mul__(self, *args): return _TaylorPLib.Polynomial___mul__(self, *args)
    def __imul__(self, *args): return _TaylorPLib.Polynomial___imul__(self, *args)
    def __div__(self, *args): return _TaylorPLib.Polynomial___div__(self, *args)
    def __idiv__(self, *args): return _TaylorPLib.Polynomial___idiv__(self, *args)
    def sqr(self): return _TaylorPLib.Polynomial_sqr(self)
    def setSqr(self): return _TaylorPLib.Polynomial_setSqr(self)
    def sqrt(self): return _TaylorPLib.Polynomial_sqrt(self)
    def setSqrt(self): return _TaylorPLib.Polynomial_setSqrt(self)
    def _print(self): return _TaylorPLib.Polynomial__print(self)
    def printToFile(self, *args): return _TaylorPLib.Polynomial_printToFile(self, *args)
    def eval(self, *args): return _TaylorPLib.Polynomial_eval(self, *args)
    def feval(self): return _TaylorPLib.Polynomial_feval(self)
    def shift(self): return _TaylorPLib.Polynomial_shift(self)
    def isConst(self, *args): return _TaylorPLib.Polynomial_isConst(self, *args)
    def isId(self, *args): return _TaylorPLib.Polynomial_isId(self, *args)
    def isZero(self, *args): return _TaylorPLib.Polynomial_isZero(self, *args)
    def set2Const(self, *args): return _TaylorPLib.Polynomial_set2Const(self, *args)
    def set2Id(self): return _TaylorPLib.Polynomial_set2Id(self)
    def set2Zero(self, *args): return _TaylorPLib.Polynomial_set2Zero(self, *args)
    def setCoeffs(self, *args): return _TaylorPLib.Polynomial_setCoeffs(self, *args)
    def __getitem__(self, *args): return _TaylorPLib.Polynomial___getitem__(self, *args)
    def __setitem__(self, *args): return _TaylorPLib.Polynomial___setitem__(self, *args)
    def __str__(self): return _TaylorPLib.Polynomial___str__(self)
Polynomial_swigregister = _TaylorPLib.Polynomial_swigregister
Polynomial_swigregister(Polynomial)

class Matrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matrix, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _TaylorPLib.new_Matrix(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TaylorPLib.delete_Matrix
    __del__ = lambda self : None;
    def nrows(self): return _TaylorPLib.Matrix_nrows(self)
    def ncols(self): return _TaylorPLib.Matrix_ncols(self)
    def order(self): return _TaylorPLib.Matrix_order(self)
    def get(self, *args): return _TaylorPLib.Matrix_get(self, *args)
    def set(self, *args): return _TaylorPLib.Matrix_set(self, *args)
    def __call__(self, *args): return _TaylorPLib.Matrix___call__(self, *args)
    def __eq__(self, *args): return _TaylorPLib.Matrix___eq__(self, *args)
    def __ne__(self, *args): return _TaylorPLib.Matrix___ne__(self, *args)
    def __add__(self, *args): return _TaylorPLib.Matrix___add__(self, *args)
    def __iadd__(self, *args): return _TaylorPLib.Matrix___iadd__(self, *args)
    def __sub__(self, *args): return _TaylorPLib.Matrix___sub__(self, *args)
    def __isub__(self, *args): return _TaylorPLib.Matrix___isub__(self, *args)
    def __neg__(self): return _TaylorPLib.Matrix___neg__(self)
    def __imul__(self, *args): return _TaylorPLib.Matrix___imul__(self, *args)
    def __mul__(self, *args): return _TaylorPLib.Matrix___mul__(self, *args)
    def mmCaABbC(self, *args): return _TaylorPLib.Matrix_mmCaABbC(self, *args)
    def bmmCaABbC(self, *args): return _TaylorPLib.Matrix_bmmCaABbC(self, *args)
    def mmCasABbC(self, *args): return _TaylorPLib.Matrix_mmCasABbC(self, *args)
    def mmCaAsBbC(self, *args): return _TaylorPLib.Matrix_mmCaAsBbC(self, *args)
    def mmCaAUTBPbC(self, *args): return _TaylorPLib.Matrix_mmCaAUTBPbC(self, *args)
    def mmCaAATbC(self, *args): return _TaylorPLib.Matrix_mmCaAATbC(self, *args)
    def mmCaATAbC(self, *args): return _TaylorPLib.Matrix_mmCaATAbC(self, *args)
    def mmCaATBbC(self, *args): return _TaylorPLib.Matrix_mmCaATBbC(self, *args)
    def mmCaATBPbC(self, *args): return _TaylorPLib.Matrix_mmCaATBPbC(self, *args)
    def mmCaABTbC(self, *args): return _TaylorPLib.Matrix_mmCaABTbC(self, *args)
    def bmmCaABTbC(self, *args): return _TaylorPLib.Matrix_bmmCaABTbC(self, *args)
    def mmCaIBbC(self, *args): return _TaylorPLib.Matrix_mmCaIBbC(self, *args)
    def mmCaAIbC(self, *args): return _TaylorPLib.Matrix_mmCaAIbC(self, *args)
    def utsolve(self, *args): return _TaylorPLib.Matrix_utsolve(self, *args)
    def utxsolve(self, *args): return _TaylorPLib.Matrix_utxsolve(self, *args)
    def cpermutem(self, *args): return _TaylorPLib.Matrix_cpermutem(self, *args)
    def rpermutem(self, *args): return _TaylorPLib.Matrix_rpermutem(self, *args)
    def transpose(self): return _TaylorPLib.Matrix_transpose(self)
    def asTranspose(self): return _TaylorPLib.Matrix_asTranspose(self)
    def shift(self): return _TaylorPLib.Matrix_shift(self)
    def isSquare(self): return _TaylorPLib.Matrix_isSquare(self)
    def isId(self): return _TaylorPLib.Matrix_isId(self)
    def isZero(self): return _TaylorPLib.Matrix_isZero(self)
    def set2Id(self, *args): return _TaylorPLib.Matrix_set2Id(self, *args)
    def set2IdFromIndices(self, *args): return _TaylorPLib.Matrix_set2IdFromIndices(self, *args)
    def set2Zero(self, *args): return _TaylorPLib.Matrix_set2Zero(self, *args)
    def set2ZeroFromIndices(self, *args): return _TaylorPLib.Matrix_set2ZeroFromIndices(self, *args)
    def set2Val(self, *args): return _TaylorPLib.Matrix_set2Val(self, *args)
    def set2ValFromIndices(self, *args): return _TaylorPLib.Matrix_set2ValFromIndices(self, *args)
    def _print(self): return _TaylorPLib.Matrix__print(self)
    def printWithName(self, *args): return _TaylorPLib.Matrix_printWithName(self, *args)
    def __getitem__(self, *args): return _TaylorPLib.Matrix___getitem__(self, *args)
    def __setitem__(self, *args): return _TaylorPLib.Matrix___setitem__(self, *args)
    def __str__(self): return _TaylorPLib.Matrix___str__(self)
Matrix_swigregister = _TaylorPLib.Matrix_swigregister
Matrix_swigregister(Matrix)

class MathException(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MathException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MathException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _TaylorPLib.new_MathException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TaylorPLib.delete_MathException
    __del__ = lambda self : None;
    def what(self): return _TaylorPLib.MathException_what(self)
MathException_swigregister = _TaylorPLib.MathException_swigregister
MathException_swigregister(MathException)

# This file is compatible with both classic and new-style classes.


